name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: The version to release (e.g. v1.2.3)
        required: true
      latest:
        description: Whether to tag this release latest
        required: true
        default: 'false'
      prerelease:
        description: Whether to make a created release a pre-release
        default: 'true'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RH_SCAN_REGISTRY: quay.io
  RH_IMAGE_NAME: redhat-isv-containers/62c721d5ea2ed524ce4af71b


jobs:
  semver:
    outputs:
      fullversion: ${{ steps.semver_parser.outputs.fullversion }}
      major: ${{ steps.semver_parser.outputs.major }}
      minor: ${{ steps.semver_parser.outputs.minor }}
      patch: ${{ steps.semver_parser.outputs.patch }}
      prerelease: ${{ steps.semver_parser.outputs.prerelease }}
    runs-on: ubuntu-latest
    steps:
      - uses: mukunku/tag-exists-action@v1.0.0
        id: check-tag
        name: check if tag already exists
        with:
          tag: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: fail if tag already exists
        if: ${{ steps.check-tag.outputs.exists == 'true' }}
        run: exit 1

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'

  build-push-images:
    environment: 'Docker Push'
    needs: semver
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add standard tags
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.fullversion }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add major.minor tag
        if: ${{ needs.semver.outputs.prerelease == '' }}
        run: |
          echo 'TAGS_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.major }}.${{ needs.semver.outputs.minor }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat standard tags
        run: |
          echo 'REDHAT_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.fullversion }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat major.minor tag
        if: ${{ needs.semver.outputs.prerelease == '' }}
        run: |
          echo 'REDHAT_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.major }}.${{ needs.semver.outputs.minor }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to RH Scan Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.RH_SCAN_REGISTRY }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.event.inputs.latest == 'true' }}
          tags: ${{ env.TAGS_STANDARD }}${{ env.TAGS_SUPPLEMENTAL }}

      - name: Docker meta (RedHat)
        id: meta_redhat
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.REDHAT_STANDARD }}${{ env.REDHAT_SUPPLEMENTAL }}

      - name: Build binary
        id: docker_build_binary
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: false
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: builder
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push Red Hat
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta_redhat.outputs.version }}
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # RedHat scan registry does not support multiarch images
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta_redhat.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git


      - name: Run Red Hat certification
        uses: ./.github/actions/redhat-certification-action
        with:
          image: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}:${{ steps.meta_redhat.outputs.version }}
          submit: true
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
          apitoken: ${{ secrets.RH_PYXIS_TOKEN }}
          certificationid: ${{ secrets.RH_PROJECT_ID }}

  test-integration-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    strategy:
      matrix:
        kubernetes-version:
          - 'v1.24.2'
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Kubernetes ${{ matrix.kubernetes_version }} Integration Tests
        run: make test.integration

  test-e2e-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    strategy:
      matrix:
        kubernetes-version:
          - 'v1.24.2'
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Kubernetes ${{ matrix.kubernetes_version }} E2E Tests
        run: make test.e2e

  create-release-branch:
    runs-on: ubuntu-latest
    needs: 
      - test-integration-current-kubernetes
      - test-e2e-current-kubernetes
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release branch if not exist
        run: |
          if ! git ls-remote --exit-code --heads origin release/${{ github.event.inputs.tag }}; then
            git checkout -b release/${{ github.event.inputs.tag }}
            git push origin release/${{ github.event.inputs.tag }}
          fi

  update-olm-bundles:
    runs-on: ubuntu-latest
    needs:
      - semver
      - create-release-branch
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: config git user and branch
        run: |
          git config --global user.email "team-k8s+github-bot@konghq.com"
          git config --global user.name "Kong's Team k8s bot"
          git checkout release/${{ github.event.inputs.tag }}

      - name: GPG sign the commits
        uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Generate bundles
        run: |
          VERSION=${{ needs.semver.outputs.fullversion }}  make bundle.regular
          VERSION=${{ needs.semver.outputs.fullversion }}  make bundle.redhat-certified
      
      - name: Push changes to a release branch
        run: |
          if ! git diff --quiet; then
            git add bundle
            git add config
            git commit -m "chore(bundle): update OLM bundles to v${{ needs.semver.outputs.fullversion }}"
            git push -f origin release/${{ github.event.inputs.tag }}
          fi

  redhat-certified-operators-create-branch:
    runs-on: ubuntu-latest
    needs:
      - semver
      - update-olm-bundles
      - build-push-images
      - test-integration-current-kubernetes
      - test-e2e-current-kubernetes
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: Kong/redhat-certified-operators
        token: ${{ secrets.PAT_GITHUB }}
        ref: main

    - name: create and push branch if not exist
      run: |
        if ! git ls-remote --exit-code --heads origin kong-gateway-operator-${{ github.event.inputs.tag }}; then
          git checkout -b kong-gateway-operator-${{ github.event.inputs.tag }}
          git push origin kong-gateway-operator-${{ github.event.inputs.tag }}
        fi

  redhat-certified-operators-push-bundle:
    runs-on: ubuntu-latest
    needs:
      - semver
      - redhat-certified-operators-create-branch
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: checkout release/${{ github.event.inputs.tag }} branch
      run: |
        git checkout release/${{ github.event.inputs.tag }}

    - name: Pushes bundle to Kong/redhat-certified-operators
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.PAT_GITHUB }}
      with:
        commit-message: operator kong-gateway-operator (${{ github.event.inputs.tag }})
        source-directory: bundle/redhat-certified
        destination-github-username: Kong
        destination-repository-name: redhat-certified-operators
        user-email: team-k8s+github-bot@konghq.com
        target-branch: kong-gateway-operator-${{ github.event.inputs.tag }}
        target-directory: operators/kong-gateway-operator/${{ github.event.inputs.tag }}

  community-operators-push-bundle:
    runs-on: ubuntu-latest
    needs:
      - semver
      - build-push-images
      - test-integration-current-kubernetes
      - test-e2e-current-kubernetes
      - update-olm-bundles

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: checkout release/${{ github.event.inputs.tag }} branch
      run: |
        git checkout release/${{ github.event.inputs.tag }}

    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: get the version, without the v prefix
      run: |
        echo "VERSION=${{ needs.semver.outputs.fullversion }}" >> $GITHUB_ENV

    - name: bundle
      run: VERSION=${{ env.VERSION }} make bundle.regular

    - name: Checkout k8s-operatorhub/community-operators repo
      uses: actions/checkout@v3
      with:
        repository: k8s-operatorhub/community-operators
        path: k8s-operatorhub-community-operators

    - name: Copy the bundle to the k8s-operatorhub-community-operators repo
      # Operator bundles in community-operators do not have a 'v' prefix in directory
      # names so we use the 'v' stripped tag.
      run: |
        mkdir -p k8s-operatorhub-community-operators/operators/kong-gateway-operator/${{ env.VERSION }}
        cp -r bundle/regular/* k8s-operatorhub-community-operators/operators/kong-gateway-operator/${{ env.VERSION }}

    - name: Read PR template from k8s-operatorhub-community-operators/docs/pull_request_template.md
      id: pr-template
      run: |
        echo "PR_TEMPLATE<<EOF" >> $GITHUB_ENV
        cat k8s-operatorhub-community-operators/docs/pull_request_template.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: GPG sign the commits
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Pushes bundle to k8s-operatorhub-community-operators
      uses: peter-evans/create-pull-request@b4d51739f96fca8047ad065eccef63442d8e99f7
      with:
        token: ${{ secrets.PAT_GITHUB }}
        path: k8s-operatorhub-community-operators
        push-to-fork: Kong/k8s-operatorhub-community-operators
        add-paths: operators/kong-gateway-operator/${{ env.VERSION }}
        commit-message: operator kong-gateway-operator (${{ env.VERSION }})
        committer: Kong <team-k8s+github-bot@konghq.com>
        author: Kong <team-k8s+github-bot@konghq.com>
        signoff: true
        base: main
        branch: kong-gateway-operator-${{ github.event.inputs.tag }}
        delete-branch: true
        title: operator kong-gateway-operator (${{ env.VERSION }})
        body: ${{ env.PR_TEMPLATE }}

  publish-release:
    runs-on: ubuntu-latest
    needs:
      - semver
      - build-push-images
      - test-integration-current-kubernetes
      - test-e2e-current-kubernetes
      - redhat-certified-operators-push-bundle
      - community-operators-push-bundle
    steps:
      - name: determine release type (release, prerelease)
        id: release_type
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "::set-output name=type::prerelease"
          else
            echo "::set-output name=type::release"
          fi

      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      # Use the main branch as a base for the release.
      # Any changes made on the branch that the workflow was triggered on will not be included 
      # in the release PR. If anything needs to be fixed before a release, it should be
      # done on the main branch.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT_GITHUB }}

      # The bumped version file is included in the release PR.
      - name: Ensure version is set
        env:
          VERSION: ${{ needs.semver.outputs.fullversion }}
        run: |
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo ${VERSION} > VERSION

      # Generated bundles and kustomized config are part of the release PR.
      # This is done locally in this job, to avoid including unintended changes.
      # If anything needs to be fixed before a release, it should be done on the main branch.
      - name: Generate bundles
        run: |
          make bundle.regular
          make bundle.redhat-certified

      # PRs to the main branch will update the version file, generated bundles and kustomized config.
      - name: create a release PR
        uses: peter-evans/create-pull-request@b4d51739f96fca8047ad065eccef63442d8e99f7
        with:
          token: ${{ secrets.PAT_GITHUB }}
          path: .
          add-paths: |
            bundle
            config
            VERSION
          commit-message: "chore(${{ steps.release_type.outputs.type }}): [bot] ${{ env.VERSION }}"
          committer: Kong <team-k8s+github-bot@konghq.com>
          author: Kong <team-k8s+github-bot@konghq.com>
          delete-branch: true
          title: "chore(${{ steps.release_type.outputs.type }}): [bot] ${{ env.VERSION }}"
          body: "chore(${{ steps.release_type.outputs.type }}): [bot] ${{ env.VERSION }}"

      - name: Checkout to Kong/gateway-operator-docs repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: Kong/gateway-operator-docs
          path: gateway-operator-docs

      - name: Update docs repo with new release
        run: |
          rm -rf gateway-operator-docs/config
          cp -r config gateway-operator-docs
          cp CHANGELOG.md gateway-operator-docs

      - name: GPG sign the commits
        uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Create a PR to update the docs repo with the new release.
      # PR includes the CHANGELOG and config files.
      - name: Create a PR to Kong/gateway-operator-docs
        uses: peter-evans/create-pull-request@b4d51739f96fca8047ad065eccef63442d8e99f7
        with:
          token: ${{ secrets.PAT_GITHUB }}
          path: gateway-operator-docs
          add-paths: |
            config
            CHANGELOG.md
          commit-message: "chore(release): operator kong-gateway-operator (${{ env.VERSION }})"
          committer: Kong <team-k8s+github-bot@konghq.com>
          author: Kong <team-k8s+github-bot@konghq.com>
          base: main
          branch: kong-gateway-operator-${{ github.event.inputs.tag }}
          delete-branch: true
          title: operator kong-gateway-operator (${{ env.VERSION }})
          body: operator kong-gateway-operator (${{ env.VERSION }})
